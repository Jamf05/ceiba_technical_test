// Mocks generated by Mockito 5.3.2 from annotations
// in ceiba_technical_test/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ceiba_technical_test/core/database/database_helper.dart'
    as _i11;
import 'package:ceiba_technical_test/core/failures/failure.dart' as _i6;
import 'package:ceiba_technical_test/core/usecase/usecase.dart' as _i10;
import 'package:ceiba_technical_test/features/data/datasource/user_local_data_source.dart'
    as _i16;
import 'package:ceiba_technical_test/features/data/datasource/user_remote_data_source.dart'
    as _i13;
import 'package:ceiba_technical_test/features/data/models/posts_model.dart'
    as _i15;
import 'package:ceiba_technical_test/features/data/models/user_model.dart'
    as _i14;
import 'package:ceiba_technical_test/features/domain/entities/posts_entity.dart'
    as _i7;
import 'package:ceiba_technical_test/features/domain/entities/user_entity.dart'
    as _i9;
import 'package:ceiba_technical_test/features/domain/repositories/user_repository.dart'
    as _i2;
import 'package:ceiba_technical_test/features/domain/usecases/get_posts_list_use_case.dart'
    as _i4;
import 'package:ceiba_technical_test/features/domain/usecases/get_user_list_use_case.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPostsListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPostsListUseCase extends _i1.Mock
    implements _i4.GetPostsListUseCase {
  MockGetPostsListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>?>> call(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [userId],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>?>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.PostEntity>?>(
          this,
          Invocation.method(
            #call,
            [userId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>?>>);
}

/// A class which mocks [GetUserListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserListUseCase extends _i1.Mock
    implements _i8.GetUserListUseCase {
  MockGetUserListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>?>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>?>>.value(
                _FakeEither_1<_i6.Failure, List<_i9.UserEntity>?>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>?>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i11.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<int> insert(
    String? table,
    Map<String, dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<List<Map<dynamic, dynamic>>?> select(
    String? table, {
    List<String>? cols,
    String? where,
    List<dynamic>? whereArgs,
    String? orderBy,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [table],
          {
            #cols: cols,
            #where: where,
            #whereArgs: whereArgs,
            #orderBy: orderBy,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<Map<dynamic, dynamic>>?>.value(),
      ) as _i5.Future<List<Map<dynamic, dynamic>>?>);
  @override
  _i5.Future<void> update(
    String? table,
    Map<String, dynamic>? values,
    String? where,
    List<dynamic>? whereArgs,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
            where,
            whereArgs,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> execute(
    String? sql, {
    _i12.Database? db,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [sql],
          {#db: db},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> delete(
    String? table, {
    _i12.Database? db,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {#db: db},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i2.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>>> getUserList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserList,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i9.UserEntity>>(
          this,
          Invocation.method(
            #getUserList,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i9.UserEntity>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>>> getPostsList(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsList,
          [userId],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.PostEntity>>(
          this,
          Invocation.method(
            #getPostsList,
            [userId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.PostEntity>>>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i13.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i14.UserModel>> getUserList() => (super.noSuchMethod(
        Invocation.method(
          #getUserList,
          [],
        ),
        returnValue: _i5.Future<List<_i14.UserModel>>.value(<_i14.UserModel>[]),
      ) as _i5.Future<List<_i14.UserModel>>);
  @override
  _i5.Future<List<_i15.PostModel>> getPostsList(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsList,
          [userId],
        ),
        returnValue: _i5.Future<List<_i15.PostModel>>.value(<_i15.PostModel>[]),
      ) as _i5.Future<List<_i15.PostModel>>);
}

/// A class which mocks [UserLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDataSource extends _i1.Mock
    implements _i16.UserLocalDataSource {
  MockUserLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i14.UserModel>> getUserList() => (super.noSuchMethod(
        Invocation.method(
          #getUserList,
          [],
        ),
        returnValue: _i5.Future<List<_i14.UserModel>>.value(<_i14.UserModel>[]),
      ) as _i5.Future<List<_i14.UserModel>>);
  @override
  _i5.Future<bool> saveUserList(List<_i14.UserModel>? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserList,
          [list],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> cleanUserList() => (super.noSuchMethod(
        Invocation.method(
          #cleanUserList,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
